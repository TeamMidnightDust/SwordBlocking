plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id "me.shedaniel.unified-publishing" version "0.1.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url "https://api.modrinth.com/maven" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "maven.modrinth:midnightlib:${midnightlib_version}"
	include "maven.modrinth:midnightlib:${midnightlib_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

remapJar {
    archiveVersion = "${project.version}-${project.minecraft_version}"
    archiveBaseName = "${project.archivesBaseName}"
}

ext {
    releaseChangelog = {
        def changes = new StringBuilder()
        changes << "## Sword Blocking v$project.version for $project.minecraft_version\n[View the changelog](https://www.github.com/TeamMidnightDust/SwordBlocking/commits/)"
        def proc = "git log --max-count=1 --pretty=format:%s".execute()
        proc.in.eachLine { line ->
            def processedLine = line.toString()
            if (!processedLine.contains("New translations") && !processedLine.contains("Merge") && !processedLine.contains("branch")) {
                changes << "\n- ${processedLine.capitalize()}"
            }
        }
        proc.waitFor()
        return changes.toString()
    }
}


unifiedPublishing {
    project {
        displayName = "Sword Blocking v$project.version - Fabric $project.minecraft_version"
        releaseType = "$project.release_type"
        changelog = releaseChangelog()
        gameVersions = []
        gameLoaders = ["fabric","quilt"]
        mainPublication remapJar
        relations {
            depends {
                curseforge = "midnightlib"
                modrinth = "midnightlib"
            }
        }

        var CURSEFORGE_TOKEN = project.findProperty("CURSEFORGE_TOKEN") ?: System.getenv("CURSEFORGE_TOKEN")
        if (CURSEFORGE_TOKEN != null) {
            curseforge {
                token = CURSEFORGE_TOKEN
                id = rootProject.curseforge_id
                gameVersions.addAll "Java 21", project.minecraft_version
            }
        }

        var MODRINTH_TOKEN = project.findProperty("MODRINTH_TOKEN") ?: System.getenv("MODRINTH_TOKEN")
        if (MODRINTH_TOKEN != null) {
            modrinth {
                token = MODRINTH_TOKEN
                id = rootProject.modrinth_id
                version = "$project.version"
                gameVersions.addAll project.minecraft_version
            }
        }
    }
}